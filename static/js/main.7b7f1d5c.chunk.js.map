{"version":3,"sources":["components/NavbarComponent.js","components/TableComponent.js","pages/Dashboard.js","routes/Routes.js","serviceWorker.js","index.js"],"names":["Navbar","props","className","href","name","data","id","personaje","anime","Mycomponent","state","form","modalInsert","modalEdit","handleChange","e","setState","target","value","showAddModal","hideAddModal","showEditModal","registro","hideEditModal","insertar","idNueva","length","lista","push","guardar","dato","contador","map","eliminar","window","confirm","splice","Container","Button","color","onClick","Table","this","datitos","Modal","isOpen","ModalHeader","ModalBody","FormGroup","readOnly","type","onChange","ModalFooter","Component","Dashboard","Routes","path","component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7b7f1d5c.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport {Dropdown, DropdownItem, DropdownMenu, DropdownToggle} from 'reactstrap'\r\n\r\nfunction Navbar(props) {\r\n\r\n\r\n    return (\r\n        <div>\r\n            <nav className=\"navbar navbar-expand-lg navbar-light\">\r\n                <a className=\"navbar-brand\" href=\"#\"> <ion-icon name=\"fitness\"/> Sisgevet</a>\r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Navbar\r\n\r\n","import React, { Component } from 'react'\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport {\r\n  Table,\r\n  Button,\r\n  Container,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  FormGroup,\r\n  ModalFooter,\r\n} from \"reactstrap\";\r\n\r\n\r\nconst data = [\r\n    {id: 1, personaje: \"Ushio\", anime: \"Clannad After Stories\"},\r\n    {id: 2, personaje: \"Nagisa\", anime: \"Clannad\"},\r\n    {id: 3, personaje: \"Kanade\", anime: \"Angel Beats\"},\r\n    {id: 4, personaje: \"Goku\", anime: \"Dragon Ball\"},\r\n    {id: 5, personaje: \"Pan\", anime: \"Dragon Ball GT\"},\r\n    {id: 6, personaje: \"Niko-Ni\", anime: \"Love Live!\"},\r\n  ];\r\n\r\nexport class Mycomponent extends Component {\r\n    state = {\r\n        data: data,\r\n        form: {\r\n            id: '',\r\n            personaje: '',\r\n            anime: '',\r\n        },\r\n        modalInsert: false,\r\n        modalEdit: false,\r\n    };\r\n\r\n    handleChange = e => {\r\n        this.setState({\r\n            form: {\r\n                ...this.state.form,\r\n                [e.target.name]: e.target.value,\r\n            }\r\n        });\r\n    }\r\n\r\n    showAddModal = () => {\r\n        this.setState({modalInsert: true});\r\n    }\r\n\r\n    hideAddModal = () => {\r\n        this.setState({modalInsert: false});\r\n    }\r\n\r\n    showEditModal = (registro) => {\r\n        this.setState({modalEdit: true, form: registro});\r\n    }\r\n\r\n    hideEditModal = () => {\r\n        this.setState({modalEdit: false});\r\n    }\r\n\r\n    insertar = () => {\r\n        var idNueva = {...this.state.form};\r\n        idNueva.id = this.state.data.length+1;\r\n        var lista = this.state.data;\r\n        lista.push(idNueva)\r\n        this.setState({data: lista, modalInsert: false})\r\n\r\n    }\r\n\r\n    guardar = (dato) => {\r\n        var contador=0;\r\n        var lista=this.state.data;\r\n        lista.map((registro) => {\r\n            if (dato.id == registro.id) {\r\n                lista[contador].personaje = dato.personaje;\r\n                lista[contador].anime = dato.anime;\r\n            }\r\n            contador++;\r\n        })\r\n        this.setState({data: lista, modalEdit: false});\r\n        \r\n    }\r\n\r\n    eliminar = (dato) => {\r\n        var opcion = window.confirm(\"Realmente deseas eliminar \" + dato.personaje + \"?\");\r\n        if (opcion) {\r\n            var contador=0;\r\n            var lista = this.state.data;\r\n            lista.map((registro) => {\r\n                if (dato.id ==registro.id ) {\r\n                    lista.splice(contador, 1)\r\n                }\r\n                contador++;\r\n            });\r\n            this.setState({data: lista})\r\n        } \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n            <Container>\r\n                <br/>\r\n                <Button color=\"success\" onClick={ () => this.showAddModal() }><ion-icon name=\"add\"></ion-icon> Nuevo</Button>   \r\n                <br/> <br/>\r\n\r\n                <Table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>ID</th>\r\n                            <th>Personaje</th>\r\n                            <th>Anime</th>\r\n                            <th>Acciones</th>\r\n                        </tr>\r\n                    </thead>\r\n\r\n                    <tbody>\r\n                        { this.state.data.map( (datitos) => (\r\n                        <tr>\r\n                            <td>{datitos.id}</td>\r\n                            <td>{datitos.personaje}</td>\r\n                            <td>{datitos.anime}</td>\r\n                            <td>\r\n                                <Button color=\"info\" onClick={ () => this.showEditModal(datitos) } >Editar <ion-icon name=\"pencil\"></ion-icon></Button>\r\n                                {\"  \"}\r\n                                <Button color=\"danger\" onClick={ () => this.eliminar(datitos) } >Borrar <ion-icon name=\"trash-bin\"></ion-icon> </Button>\r\n                            </td>\r\n                        </tr>\r\n                        ))}\r\n                    </tbody>\r\n\r\n                </Table>\r\n\r\n            </Container>  \r\n\r\n            <Modal isOpen={this.state.modalInsert}>\r\n\r\n                <ModalHeader>\r\n                    <div>\r\n                        <h1>Nuevo Personaje Kawaii Desune</h1>\r\n                    </div>\r\n                </ModalHeader>\r\n\r\n                <ModalBody>\r\n\r\n                    <FormGroup>\r\n                        <label>ID: </label>\r\n                        <input className=\"form-control\" readOnly type=\"text\" value={this.state.data.length+1}/>\r\n                    </FormGroup>\r\n\r\n                    <FormGroup>\r\n                        <label>Personaje </label>\r\n                        <input className=\"form-control\" name=\"personaje\" type=\"text\" onChange={this.handleChange} />\r\n                    </FormGroup>\r\n\r\n                    <FormGroup>\r\n                        <label>Anime </label>\r\n                        <input className=\"form-control\" name=\"anime\" type=\"text\"onChange={this.handleChange} />\r\n                    </FormGroup>\r\n\r\n                </ModalBody>\r\n\r\n                <ModalFooter>\r\n                    <Button color=\"success\" onClick={ () => this.insertar() }> Guardar <ion-icon name=\"checkmark\"></ion-icon></Button>\r\n                        {\"  \"}\r\n                    <Button color=\"danger\" onClick={ () => this.hideAddModal() }><ion-icon name=\"close\"></ion-icon> Cancelar </Button>\r\n                </ModalFooter>\r\n\r\n            </Modal>  \r\n\r\n\r\n            <Modal isOpen={this.state.modalEdit}>\r\n\r\n                <ModalHeader>\r\n                    <div>\r\n                        <h5>Editar datos para {this.state.form.personaje}</h5>\r\n                    </div>\r\n                </ModalHeader>\r\n\r\n                <ModalBody>\r\n\r\n                    <FormGroup>\r\n                        <label>ID: </label>\r\n                        <input className=\"form-control\" readOnly type=\"text\" value={this.state.form.id}/>\r\n                    </FormGroup>\r\n\r\n                    <FormGroup>\r\n                        <label>Personaje </label>\r\n                        <input className=\"form-control\" name=\"personaje\" type=\"text\" onChange={this.handleChange} value={this.state.form.personaje} />\r\n                    </FormGroup>\r\n\r\n                    <FormGroup>\r\n                        <label>Anime </label>\r\n                        <input className=\"form-control\" name=\"anime\" type=\"text\"onChange={this.handleChange} value={this.state.form.anime} />\r\n                    </FormGroup>\r\n\r\n                </ModalBody>\r\n\r\n                <ModalFooter>\r\n                    <Button color=\"success\" onClick={ () => this.guardar(this.state.form) }> Confirmar <ion-icon name=\"checkmark\"></ion-icon></Button>\r\n                        {\"  \"}\r\n                    <Button color=\"danger\" onClick={ () => this.hideEditModal() }><ion-icon name=\"close\"></ion-icon> Cancelar </Button>\r\n                </ModalFooter>\r\n\r\n            </Modal>  \r\n\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Mycomponent","import React from 'react'\r\nimport Barra from '../components/NavbarComponent'\r\nimport Tablita from '../components/TableComponent'\r\n\r\nfunction Dashboard(props) {\r\n    return (\r\n        <div>\r\n            <Barra />\r\n            <Tablita />\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dashboard\r\n\r\n","import React from 'react';\nimport {BrowserRouter, Switch, Route} from 'react-router-dom';\nimport Dashboard from '../pages/Dashboard';\n\nfunction Routes() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route path=\"/\" component={Dashboard} />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default Routes;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './assets/css/sisgevet-styles.css'\nimport Routes from './routes/Routes';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Routes />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}